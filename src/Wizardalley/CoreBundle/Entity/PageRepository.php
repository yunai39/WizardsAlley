<?php

namespace Wizardalley\CoreBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * PageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PageRepository extends EntityRepository
{
    public function findLatestFollower($id_page, $limit= 9){
        $qb = $this->_em->createQueryBuilder()
            ->select('u')
            ->from("WizardalleyUserBundle:WizardUser", 'u');
        $query = $qb
                    ->join('u.pagesFollowed', 'p')
                    ->where('p.page = :id')
                    ->orderBy('p.dateInscription', 'desc')
                    ->setMaxResults($limit)
                    ->setParameter(':id', $id_page)
                    ->getQuery();
        $result = $query->getArrayResult();
        return $result;
    }
    
    public function findPage($id_page){
        $qb = $this->_em->createQueryBuilder()
            ->select('p')
            ->from("WizardalleyCoreBundle:Page", 'p');
        $query = $qb
                    ->where('p.id = :id')
                    ->setParameter(':id', $id_page)
                    ->getQuery();
        $result = $query->getArrayResult();
        return $result;
        
    }
    
    public function findPageFollowedUser($id_user,$page = 1, $limit = 2){
        $offset = $limit * ($page - 1);
        $query = $this->_em->createQuery("SELECT p FROM Wizardalley\CoreBundle\Entity\Page p join p.followers puf join puf.user u WHERE u.id = ?1 ORDER BY puf.dateInscription ");
        $query->setMaxResults($limit)
              ->setFirstResult($offset)
              ->setParameter(1, $id_user);
        return $query->getScalarResult();
           
    }

    
    public function findPageCreatedUser($id_user,$page = 1, $limit = 2){
        $offset = $limit * ($page - 1);
        $query = $this->_em->createQuery("SELECT p FROM Wizardalley\CoreBundle\Entity\Page p join p.creator u  WHERE u.id = ?1 ORDER BY p.id ");
        $query->setMaxResults($limit)
              ->setFirstResult($offset)
              ->setParameter(1, $id_user);
        return $query->getScalarResult();
           
    }
    
    public function findPageEditorUser($id_user,$page = 1, $limit = 2){
        $offset = $limit * ($page - 1);
        $query = $this->_em->createQuery("SELECT p FROM Wizardalley\CoreBundle\Entity\Page p join p.editors u  WHERE u.id = ?1 ORDER BY p.id ");
        $query->setMaxResults($limit)
              ->setFirstResult($offset)
              ->setParameter(1, $id_user);
        return $query->getScalarResult();
        
    }
    
    
    public function findPagesLike($like, $page=1, $limit =4){
        $firstResult = ($page - 1)*$limit;
        
        $qb = $this->_em->createQueryBuilder()
            ->select('p')
            ->from($this->_entityName, 'p');
        $query = $qb
                    ->where('p.name LIKE :like')
                    ->orderBy('p.name','DESC')
                    ->setFirstResult($firstResult)
                    ->setMaxResults($limit)
                    ->setParameter(':like', '%'.$like.'%')
                    ->getQuery();
        
        $result = $query->getResult();
        return $result;
    }
    
}
