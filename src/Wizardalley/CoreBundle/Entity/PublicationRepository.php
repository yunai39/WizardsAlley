<?php

namespace Wizardalley\CoreBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * PublicationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PublicationRepository extends EntityRepository
{
    /**
     * @param int $id_user
     * @param int $page
     * @param int $limit
     *
     * @return array
     */
    public function findPublications(
        $id_user,
        $page = 1,
        $limit = 4
    ) {
        $firstResult = ($page - 1) * $limit;

        $qb = $this->_em->createQueryBuilder()->select('p')->from($this->_entityName, 'p');
        $query = $qb
                    ->join('p.user', 'u')
                    ->where('u.id = :id')
                    ->orderBy('p.datePublication', 'DESC')
                    ->setFirstResult($firstResult)
                    ->setMaxResults($limit)
                    ->setParameter(':id', $id_user)
                    ->getQuery();
        $result = $query->getArrayResult();

        return $result;
    }


    /**
     * @param int $page
     * @param int $limit
     *
     * @return array
     */
    public function findCommentPublication(
        $page = 1,
        $limit = 4
    ) {
        $firstResult = ($page - 1) * $limit;
        $qb = $this->_em->createQueryBuilder()->select('c')->from('WizardalleyCoreBundle:CommentPublication', 'c');


        $result = $qb->addSelect('COUNT(c)')
                     ->groupBy('c.publication')
                     ->innerJoin('c.publication', 'p')
                     ->innerJoin('p.parent', 'ap')
                     ->addSelect('p')
                     ->getQuery()
                     ->getArrayResult();

        echo '<pre>';
        print_r($result);
        echo '</pre>';
        return $result;

        $qb = $this->_em->createQueryBuilder()
            ->select('p')
            ->from($this->_entityName, 'p');

        $qb
            ->join('p.comments', 'c')
            ->select('c')
            ->select('c, COUNT(c.id) AS nb_comments')
            ->groupBy('p.id')
            ->orderBy('nb_comments', 'DESC')
            ->setFirstResult($firstResult)
            ->setMaxResults($limit)
        ;

        return $qb->getQuery()->getArrayResult();

    }

    /**
     * @param string $like
     * @param int    $page
     * @param int    $limit
     *
     * @return array
     */
    public function findPublicationLike(
        $like,
        $page = 1,
        $limit = 4
    ) {
        $firstResult = ($page - 1)*$limit;
        
        $qb = $this->_em->createQueryBuilder()
            ->select('p')
            ->from($this->_entityName, 'p');
        $query = $qb
                    ->addSelect('i')
                    ->join('p.images', 'i')
                    ->where('p.title LIKE :like')
                    ->orderBy('p.title', 'DESC')
                    ->setFirstResult($firstResult)
                    ->setMaxResults($limit)
                    ->setParameter(':like', '%'.$like.'%')
                    ->getQuery();
        
        $result = $query->getArrayResult();

        return $result;
    }

    /**
     * @param int $id_page
     * @param int $page
     * @param int $limit
     *
     * @return array
     * @throws \Doctrine\DBAL\DBALException
     */
    public function findPublicationsPage(
        $id_page,
        $page = 1,
        $limit = 4
    ) {
        $firstResult = ($page - 1)*$limit;
        $sql = "
        select distinct w.username, w.id as 'user_id',pu.id as id, pu.title, pu.small_content, pa.datePublication,
            (
                SELECT
                    path
                FROM
                    image_publication ip
                WHERE
                    ip.publication_id = pu.id
                limit 1
            ) as path
            from
                abstract_publication pa
                left join publication pu
                    on pa.id = pu.id
                left join wizard_user w on w.id = pa.user_id 
                left join page p on p.id = pu.page_id
            where
                p.id = ? 
                order by pa.datePublication desc
                limit {$firstResult},{$limit}
                ";
        $conn = $this->getEntityManager()->getConnection();
        $stmt = $conn->prepare($sql);
        $stmt->execute(array($id_page));

        return $stmt->fetchAll();
    }

    /**
     * @return array
     */
    public function findPublicationThisMonth()
    {
        $qb     = $this->_em->createQueryBuilder()->select('p')->from($this->_entityName, 'p');
        $query  = $qb->where('p.datePublication > :date')
                     ->setParameter(':date', (new \DateTime())->format('Y-m'))
                     ->getQuery()
        ;
        $result = $query->getArrayResult();

        return $result;
    }
}
